{"version":3,"sources":["../../../src/components/widgets/SymbolSelector.js"],"names":["SymbolSelector","props","state","isOpen","togglePanel","bind","nextProps","nextState","markerColor","borderColor","nextMarkerColor","nextBorderColor","value","setState","symbolOptions","currentSymbol","find","symbol","paddingTop","paddingLeft","symbolStyle","stroke","fill","strokeOpacity","strokeWidth","label","map","option","onChange","toggleClass","backgroundDark","renderActiveOption","renderOptions","Component","propTypes","PropTypes","bool","string","func","array"],"mappings":"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","sourcesContent":["import {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport {CarretDownIcon} from 'plotly-icons';\n\nexport default class SymbolSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n    this.togglePanel = this.togglePanel.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {markerColor, borderColor} = this.props;\n    const {markerColor: nextMarkerColor, borderColor: nextBorderColor} = nextProps;\n\n    return (\n      this.props.value !== nextProps.value ||\n      this.state.isOpen !== nextState.isOpen ||\n      markerColor !== nextMarkerColor ||\n      borderColor !== nextBorderColor\n    );\n  }\n\n  togglePanel() {\n    this.setState({isOpen: !this.state.isOpen});\n  }\n\n  renderActiveOption() {\n    const {markerColor, borderColor, symbolOptions, value} = this.props;\n    const currentSymbol = symbolOptions.find((symbol) => symbol.value === value);\n    if (!currentSymbol) {\n      return (\n        <span\n          style={{\n            paddingTop: '5px',\n            paddingLeft: '15px',\n          }}\n        >\n          {'-'}\n        </span>\n      );\n    }\n\n    const symbolStyle = {\n      stroke: currentSymbol.fill === 'none' ? markerColor : borderColor,\n      strokeOpacity: '1',\n      strokeWidth: '2px',\n      fill: currentSymbol.fill === 'none' ? 'none' : markerColor,\n    };\n\n    return (\n      <span>\n        <svg width=\"18\" height=\"18\">\n          <g transform=\"translate(8,8)\">\n            <path d={currentSymbol.label} style={symbolStyle} />\n          </g>\n        </svg>\n      </span>\n    );\n  }\n\n  renderOptions() {\n    const {markerColor, borderColor, symbolOptions} = this.props;\n    return symbolOptions.map((option) => {\n      const {fill, value, label} = option;\n\n      const symbolStyle = {\n        stroke: fill === 'none' ? markerColor : borderColor,\n        strokeOpacity: '1',\n        strokeWidth: '2px',\n        fill: fill === 'none' ? 'none' : markerColor,\n      };\n      return (\n        <div\n          className=\"symbol-selector__item\"\n          key={value}\n          onClick={() => this.props.onChange(value)}\n        >\n          <svg width=\"28\" height=\"28\" className=\"symbol-selector__symbol\" data-value={value}>\n            <g transform=\"translate(14,14)\">\n              <path d={label} style={symbolStyle} />\n            </g>\n          </svg>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const {isOpen} = this.state;\n    const toggleClass = classnames('symbol-selector__toggle', {\n      'symbol-selector__toggle--dark': this.props.backgroundDark,\n    });\n\n    return (\n      <div>\n        <div className={toggleClass} onClick={this.togglePanel}>\n          <span className=\"symbol-selector__toggle_option\">{this.renderActiveOption()}</span>\n          <span>\n            <CarretDownIcon className=\"symbol-selector__toggle__caret\" />\n          </span>\n        </div>\n        {isOpen && this.renderOptions()}\n      </div>\n    );\n  }\n}\n\nSymbolSelector.propTypes = {\n  backgroundDark: PropTypes.bool,\n  markerColor: PropTypes.string,\n  borderColor: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  symbolOptions: PropTypes.array,\n};\n"],"file":"SymbolSelector.js"}